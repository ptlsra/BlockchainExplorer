/**
 * http://usejsdoc.org/
 */
/*
$(window).load(function() {
	// Animate loader off screen
	
});
*/

$(document).ready(function(){
    /**
    * get blockchain info on startup & check every 5 seconds
    */

	function initDashBoard() {
		var ipAddress = "172.21.80.84";
		var portNo = "5005";
		localStorage.setItem("ipAddress", ipAddress);
		localStorage.setItem("portNo", portNo);

		$.getJSON("http://" + ipAddress + ":" + portNo + "/getBlockChainInfo", function (result) {
			// fetch json data
			var blockHeight = result.blockHeight;
			var nodeStatus = result.nodeStatus;
			var accounts = result.accountsLength;
			if (nodeStatus == true) {
				nodeStatus = "Running";
			} else {
				nodeStatus = "Stopped";
			}
			var peerCount = result.peerCount;
			var pendingTxn = result.txPoolStatus.pending;
			var txCount = result.txCount;

			//Show values to the browser
			$("#dashboard-blocks-span").text(blockHeight);
			$("#dashboard-peers-span").text(peerCount);
			$("#dashboard-nodestatus-span").text(nodeStatus);
			$("#dashboard-pending-txn-span").text(pendingTxn);
			$("#dashboard-txns-span").text(txCount);
			$("#dashboard-accounts-span").text(accounts);
			$(".se-pre-con").fadeOut("slow");
		});



		Plotly.d3.json("http://" + ipAddress + ":" + portNo + "/getTransactionCountByTimestamp", function (err, rows) {

			function unpack(rows, key) {
				return rows.map(function (row) { return row[key]; });
			}

			var frames = []
			var x = unpack(rows.txCount, 'AAPL_x')
			var y = unpack(rows.timeStamp, 'AAPL_y')

			var n = 100;
			for (var i = 0; i < n; i++) {
				frames[i] = { data: [{ x: [], y: [] }] }
				frames[i].data[0].x = x.slice(0, i + 1);
				frames[i].data[0].y = y.slice(0, i + 1);
			}

			Plotly.plot('graph', [{
				x: frames[1].data[0].x,
				y: frames[1].data[0].y,
				fill: 'tozeroy',
				type: 'scatter',
				mode: 'lines',
				line: { color: 'green' }
			}], {
					title: "Filled-Area Animation",
					xaxis: {
						type: 'date',
						range: [
							frames[99].data[0].x[0],
							frames[99].data[0].x[99]
						]
					},
					yaxis: {
						range: [
							0,
							90
						]
					},
					updatemenus: [{
						x: 0.1,
						y: 0,
						yanchor: "top",
						xanchor: "right",
						showactive: false,
						direction: "left",
						type: "buttons",
						pad: { "t": 87, "r": 10 },
						buttons: [{
							method: "animate",
							args: [null, {
								fromcurrent: true,
								transition: {
									duration: 0,
								},
								frame: {
									duration: 40,
									redraw: false
								}
							}],
							label: "Play"
						}, {
							method: "animate",
							args: [
								[null],
								{
									mode: "immediate",
									transition: {
										duration: 0
									},
									frame: {
										duration: 0,
										redraw: false
									}
								}
							],
							label: "Pause"
						}]
					}]
				}).then(function () {
					Plotly.addFrames('graph', frames);
				});

		})

	}
	initDashBoard();

	//call in intervals
    setInterval(initDashBoard, 10000);
});